// Options: Export entire program; Code Block delimiter instructions;
// Unformatted Rung Comments; Element Documentation Database;
// System Configuration; Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\ellen.estep.one\Desktop\OFMS_PLC\FMS_Deepspace_EXPORT_DMD.txt

PLC DM-SIM

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
836eff216d83880d9e374c98f6b50f1f2654164a5add2a4522cc22faa30dfb9b5d48715adbbada4c
81d1e9fd0157892f2be88a53a64b650eeff8c9570ac91e1bd44855eaef83d740e236a14dbd72217e
f98122391ca61fafb90a917921891c1b9e1f65f8272fb24cc60af90e7e00c21d709bb0ba05c8da65
78690b726bc8dd3884e0b65b9ff190d5dbbdd920e9c8a7abe60a5fa7e15566aa4bc13ff2a77b5e0d
2577055f08d7cabc7ef00ed4ceca2c87fce0ed5f3e953764e1f5fb6668fb04328df4b20ab9ab2c0f
bfc4bcce604405599f050edaa734a0c5c0d7570d09c6a1a86e66a64dc89d5ca721f49918d3e53d4b
b9ca279538ea5afd0e62db4475f69e2bbc9e46b1856b1ddf0c12f1b16203759f068c75222815eac0
b3d20a0c971317bcd1acb1fabc586d0cf11c70c1baccef458aa2d2fb4e3900b55b5acd3aece6fda9
994c054b9e2b169d57b7296fe508a9901b0b456ab93888f81722cf1c3e313ee5b91fa193923094a7
6eac708de6fdc79dc391b3c544116e06dc54bf2a8da6818a032eaeb79d64e40cbcfac8b83ed83a31
7ce40d045922927547261895498227073eafdf9a53ed56e8cd0128cc96c6b6c28f322f1a25934560
840c7f4aed7541a96a74760cb53edca56b35f3a2b6878a8c54e389ce89c29cf39e1c38341d4f06a6
f4c1f4c2d768d8291d7c77a4edd3407515bc26921fdec282cea03c9f0ddcd861cafe02ac66892d08
13c65b21ab1658677bb86f737392bfa57c77a9376fc0901a78b253ef1be282f3a05c9fa4d7a17015
790c4014afb8e34d792ee7857766a53d0a499142491d3992aad3b613cb0b2b8062d8c5a2ffe5417b
1aa4f10a48885c981128b3157e8d79ffdff926841202d0a8d9efae3b7ed46c54a0e5c54b3c44cb9a
c6d6aa9a57cae3011b7b65f56f6d3db5557e0402fa3f7ffe972d2854340d44eef2024ecd2f44b646
91910fe3ca9d6cc9b80b7ef95e3d5a85396585e7614967e03e7859e4395b90e88eac70206d90a31c
9ea9da5b6a6660f239d41c8e87f96a1beedc39135e43fa981d75598e3cbc494dcd69db900f545bde
32413123858d8bd6fc70df4bfbe079c73cae0e67a76ad798153450348568bceebe4c6d6a7e096d3c
751f8eba088d8facdab7fa2f241823623ada8c070a3fe8893fa49a8434ff7d4a5914fb483d493fcb
11e15a8bd077c229d8548c191645bae9e8ea18d846704d8f24eb95dad44b85a8633cc91856c49125
66c90539ec935d7a6834be2584f3e35315337fb72971bec1b3569912e2acffda317c43b2953905f6
52aedb494ef4a37a7c338c56a2b477859097a6a0a65aca0a4538ad88ddb06129589000b117c5de9e
ebb4e7e70687f69df0b4b9b23884139f6ccc6c78ab562acb0eb8277014b8be1b9fc0f18465baaabd
a3fd1485095c24ffedde19fa639ce2fd5c36d849c8848ad59158e682f1cabb210a8121cda2a0eebf
ef9de7f5976e34512950e5032eaa056522bf5e84dab948e8c691f86e350bf5889e3d6319f62dc997
f97552f25942fd94cb44314e7f61e8a642acf5fe181c56f859965962a3a5d02b20dfe0c165611e76
74e594ed0c37e7f4f183033712ccc60e8af57b6b6b99e840670ba9290e67a84e7bb3a0e298754687
4d846aa363e88cf0a96b16b31c749c747ee311fea03869b8bbddea4d13d4618d80e74eb0237c72af
43a54206b58d91b1752d7f3bbd1aca42f4a7e4872c10a3c4fde53784c8f5e99492d16724ee8f2fb7
123668e0be31a199f1b914ab69bcd4bbb83025e0660a95f7a6094e86e86a24260120df35dc77af52
753e76c99942bae6b9d75972d571585e79e1f4e36c0f912eb898b6ad8ba88b154260dc1f2d36f644
2d06622ffb33b4fdafe9a25f99e25042dc08d65f27d34b83e8a97db5b2e2f8263f4a62d65d9ca6f3
d858c85374436f51b65bef48273007e9cfcc223c0d5dc284743bfe72284fd62166c5ffb9e450495f
affec4382b9e4385a59c1c4fb2895bc877b50d3a2355a872a9c604e37c8cd02fec6bba5930eccc4d
8b98fe3f59b9469e9f9def2ebb5891c31ecb7059dba155fd349fe5b8850a1e362ff3dbfa6423d48b
2cf0bd8ccef5379b7d5e00b9d470e52aa553b409f9ec665184fa5e7ed89ed1da02a3151e843c0747
6c27aa9cc9ba08ba1d3dfb5135f1733ad89b358fbb5d1c575a2f017fc5da90e212d34db08bd9561d
9268fcc0081e64f99e4ef56fdf50d2a4479d76cbdb2b29e8cd8f94cc2d05fcb92cbc7a59809a971d
429c41cdd449b0164c6f35b179f2017bdcae29446365a061c0c7ca270a0fedd71e362154a816c35d
9c224f2a2a1badbe1a3bde5925f166cbb1dbd96e6a6d90dad0e7ada148f498552ba3795944760627
b3f6c774fd684a2aa59253b1f7163173ee01a37c3f53c1b30c446163015c745cc52105fc41839731
a17a77efeeb6ee10bfea33a7088db3be09c937ed89f8af902a827082388eec69719dc10240fa2d67
6d1f088d3da7ca4dc5cd4595abb353554a924edfaec63a87fa1c88f61e8f231742fa450f251d656c
9f84cf189254feebbb6a743ba4bdeecb069122ef1cf28f75f08752a93d74fee22992cb933051a260
2575a42252c012a853d01221b7fc3f40f488a3a13e5943e53603432153e4b4c887ecf49528f5be00
ab466af98b5b18bd96b0c51f109ccdcada55e87ffb7fde5216efdedd8ef49e9983ef8f260cbafe83
2b97525ec356e11c8e7e5ec2f509588467c922e3e6709637e1237485bde98293687291180503b866
0acfd7067ebd819dd104e856e5798b2b79f67c69b5f7a0f1a4893be4c4b029a14777c8783ce6cd1b
ad0dd2e316091f2c8e57ab6b48dc22c16d1503deb1786a66b20eae8de4addff8ba7d53557437148f
dba293d6aae9468449ff5e1adc6fc7953614feb380a5a7b74cc2b7f6dbb91f7e3c68895204cf8f5b
854ac4d42084a144197c0bf242e11264bf42342b940b90cc0b8bec51ad5d2bc8bc893a4059a036d4
0dda268c661fd56242f0052382d689dfa997d47f3279deaa4f1097d8dd7c1d6f572ad7dbbcf10a4b
c96868f253c5985dd5b19d8efe6af994328ef8012d3560a898d0e59f87fdbaf95e9002af26aee09c
3023bcfbd7f8396bd4e0236a561cd3a6fcc774455c209517acecf6de930154f2a9bcd57c1a50e924
2e91244e248eba0ba6d47e8972a736ff5cc3f0cf37f26ed739cfe19dc937d7a911e4b940094ad0ab
1931fb3e41a01fa1815960957a9fb791854f93327319011deaf7988439a0b8d0f97b71ebc6c2b085
545f072efbef9b7ea652dd1d2807a6bede506381ba5fc7d22117867076b13227fd0bf86bec1fd229
6adcd2de2ee281fd1116fbdb8ca260d223dd77ac4c05c8ffacff065666b47e82e12e9f6da0ce2ffb
83cfb3efe40dad350829021fa5e23d7be65cc7f4f96cde84a08ccf43bc957d621c326425d9010002
8d4d19ff921942a7748776653b0b99b8e64317c48164df7c308b939e9735e949df1a5d55fa779569
a6cff04dfdedafd5264a620d3bfe215f0a34aa9f7869102712fc0197db74647220ea472968c65a42
dee3016b377f08fa31fbec0cce66481c39ba99778f5f179583c13fe717351c51229c51a2efedc672
bc02698819c7657408c378a9f5d836e1fec4f975c46f955cef1294d337bb1390fcd518e95dbd74d7
52bdad0b3e7c9ea06430aa317a719889b86614f953c6562e4e87f0dfc730929190a9d61d16d527f0
22b2a84543e13d7deab5c1c9666bb6228b09654cc131358ed8d950b845d4768265783aaf68f76c2e
aac2531276133d5b745e21f95831cfe5c4abb4fa3f65dbe7a5477db9ea70eb20240dd237900cfe08
daa7148833c04e870126a4baf9de86c720d480095ccff006f03bf0700a0f0774134793d353d3ac1c
0e8d5142f4ebd11d71582999067d8ee28ae573d7e2a04279fd713fdd786934ab331eb04ee47d231e
602cbd8fda455cd4011bd4791716b8fe803ef380cc4edbc6fb1976ff7e58a8364063eab0ea5e13bc
82e4a389f62eb1781fafb4145ad6064881c5a9db14fd2381906ca71cc227807c88649ee350cc6d4e
386cf3ea62b64ce2a5f741e57973b519265bcbc112a4dbc80dfd0bcf32c22ab84b69dd9ee0a5f392
6d8d39d47ceac3daf159144c8bed280cf572a10296765fac2c67abb9bd89bcaa8ca6d7de123b3699
acc3bfc3fff605132379cc7268156ad7594de8f1d48bd3f91d581ad0199f70a61f5482002da7b6eb
62f8ddfc978cacfc217fe2e844e2bfebfb0e311f4e07c0081c3b911001f98da828db6f79da066177
950179f7f1d143ea64e0af45202fdcc2f2249665937f00a3bf29622cc494dc9e88fadb9cca7cd448
7a446ae1c14f1bfacf8f6d505415ff2d146ba73567050fb03ddf23e3db1317b2725c364529016ed8
954a30655b45948ef645bcf9d4bf83693e241ef9dbe43c557c69f51754dbe1a16859b5cae38c2868
d2a0719b4d31c310425d839a49a1863f942805a36bcafa82b88789c454a4d742292e0b20a511436e
8a7c15a60b0d2bdae2824dd88798282d4df40202ae59aea7b9bff4dca9ce7c84c30785a310015ad7
aafc5567589c01b6ce3702b63ce53f7d781e10fbe4ac39e988ee0aeeec20c6282db1d06448bd73b0
f79cc6eb0486f9469be7b9d6da074a026397da42a749ccfbbd7280045408da2a132a3b22815b3ea3
b95ba8aa041542604d9d68d91572843248360be090a1c17ae0482868e570b7f2d588ead5c8e336a9
952da5e82254cb9c11f3c7a6b4df31e07ebd15e33d9c34bccec5fd184a15caaf82c55c9c8cd23a7e
9ad9cc16e3e45f133f23bc1d68872a82bdc1ef819de05f2a57da4f88c582df99b9f72a10ef691806
98effc83d76b3a080dca094f12d4f6b8653f3f9cf8bdce5a4cea5d945921b733afa596f83b508696
0e1469f7d8b64a3f80f5a429bc7bc0d8d710fae8cf7f57d3a2cfcbe5df7762428c9bce263cdb2a5d
85b8eb12134e2ea6d45afc042c9affa122651996cdfc1fca8888dcac18a17ab4e8009dd3f02f3adc
c2cfb961b2678a8ffd127c8baab91fc80ee93a357131ec785e9949cf335c7a2931a86409c37ef973
902ddfe93a9d10b54de19c2f54ba9a9f3a96308f732c3d3cf0216856b97c9c9db8c809c0c0a81899
33728c19af35c6a38514d0508fa1f56f22a6caa14e6f71356730f9de73bd5273002e1b5ef28894e1
733f3f576524016177ec447204dd0d887e2ec1afecfd8a5f0356c60ff9efb36e7cebe32db8df2f92
c0051491f54ce0f855d8ca6c28b3eb13745ba57a4f92b7ad83caa449a5edfb76cb7928b399e12307
d45026607d87c7f317b8fccfb1d4f661592826b4bef60bbde3cd817a303b1031253d77abefa8fb7d
7e251b57de115be720ab4b10d83e23f88f4e0102304f55fa8d7877ef7ab81117ccf505d3b6193967
96673c3d9d85ca0de062131d24a614a81ec8ffa1cd71bbf3773e4fa12e5ee8b3b7f1acacefdf2930
3c4cd61c8906725b33c1cd0e9ad51dd73718bd065befb195850dae226f3ead15db4c022a88c2db15
a791c7293d0b9d233e9585c691983665d379234cf8987a9c02de8fd05736a7a4d7e801331551414e
ad184fe1c88854ef169daaf6aae7ca1ebe45be7aafc471dae6f172d7a0e7295179619275892d7577
6ddb02085dbcdce781bc479912049a50d7f6fd49c30f63740491d974b094ba41c99dfdeb26d99dff
339850b41ebbb210009514ba69f78e450f8ee9ace8fb588f8c46493aea41afa6c886ee9f51e5da48
06b4521bf334b9e8f62416ab2050b10677874e82a13e0a50785e60476a4479e88286172f18e1539f
f3a646f9430382f653cde5e319a6124b6e30713db79de5ad545e7be703906a9e4f8ed018914e2c3a
6ccf7216ce9dfd9e83ba9bd951021ee6a9960a91844c6369dbbe7327d76bbc547088963620fe112f
08f58d6fb2c91564c2ff9386ae3e253a679e33325546eee1d3dc3326148437df1dd6af630d899ca1
e5a5faf59d26109c89ba516acf38cd1d53fb2ed9c1356e330a87cdc475fb9345fb2f04cec2ee24c1
d06b9c1e5b1f994f5dfbbc71c4877144515a25eedca9b70d367aa29f00fd0163c902266f2220fb06
2d99a0556f040944a61abcd222757dbcc11816a6aacad08f9a042f45496f2f6abd7058ee1773c7e4
20518dfbbdb274726f82a15058de898543e577d2d5cc39c2213e1ed95346e6943be99139c54c54c5
a5f0375d2f48523616d331d2196194a9c135deb67337c03e44e5d50d10f2475e195c982c5e75d139
f1fd1941916283cc4faf8de173a11a4431be9c5003e5d363808a83aaccddf65fc1b0a3f7bb3a3f75
bbc9ecc1c9e1492292515856a14e5e56f4cc2cd39c065dd4a2adde137acc160d16bbc8465e2a4d64
694076e37a04c8201687fc760a1815a4faccbd2884e8b7a72c69208ec734b0b0274c222c64209b80
a25940f6b65cc95496653fd028c6e50ad1241225da17964c99c20c0b3c694e0179c6c1aa06e62363
ab377efcd390273e3ac3778e2653d4ba3d9827a09afee9e7d3e1c56f51a4140b1b7f69d707179c64
7bef75bde116aacff7ea11a1acab42d5307fc9f3fe3207ee17d3cdeaf5c9293fea3c5c5a8daa1c4b
26d57903ab002d1b4ed192a449ec01e2e8940f79a60841ee6c935139bf4d05a925cd04792f1e6732
f066ef2f00ebb5fe41f7e1d5af5d70f2f69014f28d6c103a922f35bed6c9a73875e42714acb8968e
183f8b9d0f250be1bc776308a41821e5ebb2a18fc82dc58e0f3d1cdd2386443f9e73bbb1484c90a5
feb6ba539f0a045cd40ec6062f0bc23e04d05a68e3cd040309f73c1c7308b0a5ab9952279c3c1459
c2f42190ecca6254077ff73789913c244317028f9665161880a26e61d46f710fb68f1a115a0061f7
d6f0545eba25cd4f66606f471c9f6cdb74bae330744f3e12969206f7937af8e54e5886c801b697d5
bfed5c60c3b6823af1f881374f17a0f3e6963ae9d2a2d381a3710448acc6342d3b721741afe7f566
bbebaee558af8c16e35d0207abd434897418c51b615c1710916219f9e4b59caf77708975e83278ac
71ef2df2a67d887e6501d4c5b1a177388a4a3fc2081a91a92fe5b62e83dbdd683aa1a9bc6bdb3c47
ec8b17362b7824eef2f7f1e848331b36f15d6cad474c6adb72a40267b71f36fcf37b2ba2ab538075
bd456739be194a4cda90c01a1785dc93ba92de0a8879efa1c3280de9f4433b2294e3f83138e23b99
c441954aa882d483ab67a4f679c2c1f76e5e42793d2f47b7c3d0f4c2197b842c5cd2ba2e028700da
292871c5ce7de77b0a3ec31ec3e8dc76ceac3d2be79798badc6340114f2dc1525577d9b9b665b51e
64293bb1f04cd4159782dcb4c9426d79267fc9d23559a042afc0e17240db798f963d26422f444535
0717ced47400d454f97844a4b55d17d51233f7717d90c40d696e3e623e6877ed6f547240aaf814f9
63b546ae9e6a3d6fc72d40b7e21aa7def262a86a3fe84d1440ee5eaa0bf8f1b7c4245fe0a307cad8
74879fda566c85888180b71d20f418c896d2f65524b103860685c9e829448927b169a4ab1e2ba6b2
df801ca3b5e83b7440571659e88f305c500cf29980e5d2c0f41435512a83dfe19785a608e7de7e1c
198727c64cf4d6a3349557f8301a8c01c6b755e5f3e79c113a05b436976b668b12fde20a6ed361a8
40fa8a170cdb7b0463353da047a82232ea2d94a7536103d9d5c00e2fa54e6259893ba5988da681cc
8085c6c40c46c3a0fb100aa7b4b000fa03e993eedc0dd0b73428f4933a49e392e11c348cce4671dc
7fea597df31f1e8cd9bbc49f0bd74f56cab530a5966ac6c81b73025af4f20c2b79959c68afd2db99
2ec5887c797a5fea47cff48569bb01c8b9a236df9021263b32a9ae90138fe6b9ddac04cf8543a92d
407b6c17964dd472adf95db6d8c1394083d5bbca1020bc8f899b17b38378593ce83fd32f744a590d
c04bffa7ec4084a6a6a5e1bd822c20275ade171975bbc111b4938a4b654542744226155c5bf2a207
9fb4d9310ffb61ec3c587656916c84c62ed72123e064c4f180a8e48e29d63a70c80bc98d575ced84
00ad2a9dcbd42237d6b72c62b60108d95b06f2c04058800bec141f1a6627962a660590d2eb7f3b3d
6d3d00fd6e737cef927024adb63eff78844933d7965a36e7b45be331cff80b62ac993bb67c95d367
1e89a586a8fdeaf7cf50c7704022351e07793c4ab05f333ac71347a0a5da8e91e8c8b594893656b5
9c1a4698a5ffc00a6130ec4ba5ae0e5116126cb6a134b88a2447922413b77689cd36b22c09dc8a25
77e3dfae19b205d0305d21cd9d0557f0146e0d93619d27efe11f40953835bc7e6465de51ea72dbb7
f9dc60fb44443c473c84249c12aa312a36d6884bd732c30188e6829c1fef72a610b44fbe402ce996
20a2f768e366ddc1c917fe9e286fec32535236c1a8c6039a620d3400c548ddf5f65ac7338bae8cac
ab65e03c1d4a0ea794b92198b131144929caab6c4894bb06b3a1a67eecf27cad1933f5e41949ac2c
7ff148bff0c939b547db56fb78bd0292872e64f22d824386c6949c0d673a20eefe1474ccd46519bc
712aa81aefa7cb74b5737107c2e1a1192ac0a347cf26324b5493faf1fc7d76d4daf430312b20a184
17636729744bc964c4a4cc6e59b0f38a9402840328d2a510d00672a10add6aabf615a5a28820b9b4
37522e985f2a0f25e8fd9e16f97fffb8e6828c843d3a2d016282e29f4f6cb0d650dfe8bfe99ebf6a
46534ce77914b0e9884893c9f38449f4edff359a69daca689cd5f9d1bdd6222d245816f4e6f6b077
e87f8f370128acf1984556e76306489fe0d31e7817aa35c904995f1763a06e37de3ce05164575803
9d698b263f3e477638605865c798eb837829d9aa7a2c2a7ff448afb7ad552b4252b8727c0c6fda28
9c75cd06cd8d892096239fb78ef377bf686fc3960db5106e20be51d5d199ac3553b5fda4d14ddd3c
5526ba8c30e8a0fd1036b99946c931c3fe1509c8b6a4056d45e7b175b161185b3c97bdee7d87107f
09623fca6dfefec91299c163c9054c3fb583eabfdf367448444c48837b56be32cdd33eeb55fd0077
347a2a772ab6793290327c6f7283d0eea4307ba867548d0a5c7aef249aa094635faba63513d09dca
af457fc5b82ee60359bcd741306bca488ce7f4d6ed90ab795af4ed7d0c73d41eb15b814053f042f7
d2f6e8585a3d4f3f6a003f737696d390b98eec33e303acbe6d30555c98327b9d2b697d69e6dfbf1f
768f02fd56ec482b70e7338cf50861bcae789941dc8e1ef7cbac526ee709d01040743cd8c2f68e90
6354270d5f0191b984b34fc08cfa9b687096ac7b69008b021822444f8d628202461a53428bfc22af
5cbcb13255e90416b3c49f725705f2d45a35e54464d6489f70eed49deeddbc3ee5df547bc3545532
48bc7be1f468436e0c87c98c2d8f4b00b6a453ba26183022e9541af02f903a15cc7e05d7c03cf4ca
dd737680e8e07888dc21aabc634847ad5a1b81d969a8ef316dea617b66fa8bf4a353867ac04bce4d
f1a9ef8662b69612d96b21ce64214937d59446739a188489c3176728e9a0a5e25d3f7a47f16b152b
df74f737468aafb5a6e9f49737aa1f754b8ce977d04508b45793ee722e6916064a57e0fcc8a9976f
cdee6205d4ef35acb82667484098253099cbc83d344bfc4fb3c17e2d13d8b1fc194fc711cc29ef4e
1e52a12d4570d5a9a0456db81845ab0f925539cf078ea90cda16e515052ad291581f81b24e10ddfb
26c121b7a4bce07e24df22c6f64bc945231f3a8b5d1f8d640d3fd234dfdeaad20c915dd2c0b614a7
a87b93c4dc7b2ae9a573f1069802de03736d5786d3a8d52b8a1d5f237d1c8087c89a4f46190af456
424ff887e2894a557d7273cf5b4396545b3c352e44dd0b4ab6dd7d5b1df4687d7223efdf10b92034
b6b53809033c59483780d755ada910364a38ddb9d4790ae91eee6bebdc3397f5f6fbbf5e35d0ab37
1a172d80d89809601b789ea582d840e6b433a69c35ba330e4015c7ec4bc17772fa17f3cf53f48e4c
e366f28fd5bee9f2288e4b55f7ba2d06c6e246337796bdf67f9abdf391854bdda7960546221048dd
5a74ee03321a035cb1c54bd030bf77dcf606e09b9edb251a6fa3a195076d82faa405d23a9e04cd59
e3395ff116e1ec9001b1c43fc9673c1f0a5ef499c44f38b4ed3b08fbb6527dc4e511737fabe36414
47a64421e109c3f04bbba4874baca30e5ed380ec713ab8a2c8977b5d0d7a3274dad23bd6fdf8e43e
67e05c9afda403aca19a4a981fb0ba5f86a7ec1882045a82556dc913d364de61e5a5e81c5c660bac
a9a1c64d90f5c74d0165eac70045e92d29d7e1dd7a7a7d380313b199a5c4a3cc8f688d2744c0e8d0
0d9223c60b3c58ba7caa716ea7ad22b0b9bb39dd7d62451ed5f0eb1f4f4fd249642dfcc4ebaecb9d
171cbfc257d1f15e177b780d8354cabf19ce2320cbc62335f55b1a903d893bf9be7223ef4a3d0c19
32f1d132510bc8a88a846c8f05af4751373d525c68c270995377924995f00218c0a4
#END

#BEGIN DEVICE
	@IntProcSim, 11, 26
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@SDCardFS, 25, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
	@FMS_Computer, 32769, 14, 1000, 2, 60
	@UDP_FMS, 32770, 9, 5555
	@VM_Red, 32771, 14, 1000, 2, 60
	@VM_Blue, 32772, 14, 1000, 2, 60
	@Viewmarq1, 32773, 14, 250, 1, 60
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	VMBuffer	UBYTE	decimal	256
	ViewmarqString	STRING512	decimal	16
	VMByteBuff	UBYTE	decimal	256
	STRGETBBuff	UBYTE	decimal	256
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	Estop_Lights	PROGRAM		0	-1
	Red_DS_Lights	PROGRAM		0	-1
	Blue_DS_Lights	PROGRAM		0	-1
	Field_Stack_Lgt	PROGRAM		0	-1
	Year_Specific	PROGRAM		0	-1
	Red_Ref_Panels	PROGRAM		0	-1
	Blue_Ref_Panels	PROGRAM		0	-1
	VM_Red_Time	PROGRAM		0	-1
	VM_Blue_Time	PROGRAM		0	-1
	VM_Sender_Blue	PROGRAM		0	-1
	VM_Sender_Red	PROGRAM		0	-1
	VM_Time	PROGRAM		0	-1
	VM_SenderBlue	PROGRAM		0
	VM_SenderRed	PROGRAM		0
	VM_Teams	PROGRAM		0	-1
	VM_Team_Blue	PROGRAM		0	-1
	VM_Team_Red	PROGRAM		0	-1
	CaptureTime	PROGRAM		0	-1
#END

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	ST1
RUN	Estop_Lights
RUN	Red_DS_Lights
RUN	Blue_DS_Lights
MAPIO	"2 X0 C0 X1 C1 X2 C2 X3 C3 X4 C4 X5 C5 X6 C6 MC8 Y0 MC9 Y1 MC10 Y2 MC11 Y3 MC12 Y4 MC13 Y5 MC14 Y6 C14 Y7 C15 Y8 C16 Y9 C17 Y10 C18 Y11 C19 Y12"
RUN	Field_Stack_Lgt
RUN	Year_Specific
RUN	Red_Ref_Panels
RUN	Blue_Ref_Panels
RUN	VM_Time
RUN	VM_Teams
RUN	CaptureTime

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Estop_Lights
$PRGRM	Estop_Lights

// Rung Estop_Lights#1
// Offset 0
#BEGIN COMMENT 
"Handles the estop light commands from FMS and Estop Buttons"
"Red 1"
#END

STR	MC1
OR	C0
OUT	MC8

// Rung Estop_Lights#2
// Offset 3
#BEGIN COMMENT 
"Red 2"
#END

STR	MC2
OR	C1
OUT	MC9

// Rung Estop_Lights#3
// Offset 6
#BEGIN COMMENT 
"Red 3"
#END

STR	MC3
OR	C2
OUT	MC10

// Rung Estop_Lights#4
// Offset 9
#BEGIN COMMENT 
"Blue 1"
#END

STR	MC4
OR	C3
OUT	MC11

// Rung Estop_Lights#5
// Offset 12
#BEGIN COMMENT 
"Blue 2"
#END

STR	MC5
OR	C4
OUT	MC12

// Rung Estop_Lights#6
// Offset 15
#BEGIN COMMENT 
"Blue 3"
#END

STR	MC6
OR	C5
OUT	MC13

// Rung Estop_Lights#7
// Offset 18
#BEGIN COMMENT 
"Field Estop"
#END

STR	MC7
OR	C6
OUT	MC14

// End of Code Block Estop_Lights
$PGMEND	Estop_Lights

// Beginning of Code Block Red_DS_Lights
$PRGRM	Red_DS_Lights

// Rung Red_DS_Lights#1
// Offset 0
#BEGIN COMMENT 
"Handles the Red DS Lights from FMS"
"Red 1"
#END

STRN	MC15
FLASHER	1000	1000	C14

// Rung Red_DS_Lights#2
// Offset 5
#BEGIN COMMENT 
"Red 2"
#END

STRN	MC16
FLASHER	1000	1000	C15

// Rung Red_DS_Lights#3
// Offset 10
#BEGIN COMMENT 
"Red 3"
#END

STRN	MC17
FLASHER	1000	1000	C16

// Rung Red_DS_Lights#4
// Offset 15
STR	MC15
AND	MC30
SET	C14

// Rung Red_DS_Lights#5
// Offset 18
STR	MC16
AND	MC30
SET	C15

// Rung Red_DS_Lights#6
// Offset 21
STR	MC17
AND	MC30
SET	C16

// End of Code Block Red_DS_Lights
$PGMEND	Red_DS_Lights

// Beginning of Code Block Blue_DS_Lights
$PRGRM	Blue_DS_Lights

// Rung Blue_DS_Lights#1
// Offset 0
STRN	MC18
FLASHER	1000	1000	C17

// Rung Blue_DS_Lights#2
// Offset 5
STRN	MC19
FLASHER	1000	1000	C18

// Rung Blue_DS_Lights#3
// Offset 10
STRN	MC20
FLASHER	1000	1000	C19

// Rung Blue_DS_Lights#4
// Offset 15
STR	MC18
AND	MC30
SET	C17

// Rung Blue_DS_Lights#5
// Offset 18
STR	MC19
AND	MC30
SET	C18

// Rung Blue_DS_Lights#6
// Offset 21
STR	MC20
AND	MC30
SET	C19

// Rung Blue_DS_Lights#7
// Offset 24
STR	MC0
SET	MC900

// End of Code Block Blue_DS_Lights
$PGMEND	Blue_DS_Lights

// Beginning of Code Block Field_Stack_Lgt
$PRGRM	Field_Stack_Lgt

// Rung Field_Stack_Lgt#1
// Offset 0
STR	MC23
SET	C21

// Rung Field_Stack_Lgt#2
// Offset 2
STR	MC22
SET	C20

// Rung Field_Stack_Lgt#3
// Offset 4
STR	MC21
SET	C22

// Rung Field_Stack_Lgt#4
// Offset 6
STR	MC32
FLASHER	1000	1000	C22
SET	C21

// Rung Field_Stack_Lgt#5
// Offset 12
STR	MC30
SET	C22

// End of Code Block Field_Stack_Lgt
$PGMEND	Field_Stack_Lgt

// Beginning of Code Block Year_Specific
$PRGRM	Year_Specific

// Rung Year_Specific#1
// Offset 0
NOP

// End of Code Block Year_Specific
$PGMEND	Year_Specific

// Beginning of Code Block Red_Ref_Panels
$PRGRM	Red_Ref_Panels

// Rung Red_Ref_Panels#1
// Offset 0
#BEGIN COMMENT 
"Red Foul Count"
#END

STR	C91
INC	V1

// Rung Red_Ref_Panels#2
// Offset 2
#BEGIN COMMENT 
"Red Tech Foul Count"
#END

STR	C90
INC	V2

// Rung Red_Ref_Panels#3
// Offset 4
#BEGIN COMMENT 
"Red Near Left Top Hatch and Cargo"
#END

STR	C92
INC	V200
OUT	MC60

// Rung Red_Ref_Panels#4
// Offset 7
STR	C93
INC	V201
OUT	MC61

// Rung Red_Ref_Panels#5
// Offset 10
#BEGIN COMMENT 
"Red Near Right Top Hatch and Cargo"
#END

STR	C94
INC	V200
OUT	MC63

// Rung Red_Ref_Panels#6
// Offset 13
STR	C95
INC	V201
OUT	MC62

// Rung Red_Ref_Panels#7
// Offset 16
#BEGIN COMMENT 
"Red Near Left Middle Hatch and Cargo"
#END

STR	C96
INC	V200
OUT	MC64

// Rung Red_Ref_Panels#8
// Offset 19
STR	C97
INC	V201
OUT	MC65

// Rung Red_Ref_Panels#9
// Offset 22
#BEGIN COMMENT 
"Red Near Right Middle Hatch and Cargo"
#END

STR	C98
INC	V200
OUT	MC67

// Rung Red_Ref_Panels#10
// Offset 25
STR	C99
INC	V201
OUT	MC66

// Rung Red_Ref_Panels#11
// Offset 28
#BEGIN COMMENT 
"Red Near Left Bottom Hatch and Cargo"
#END

STR	C100
INC	V200
OUT	MC68

// Rung Red_Ref_Panels#12
// Offset 31
STR	C101
INC	V201
OUT	MC69

// Rung Red_Ref_Panels#13
// Offset 34
#BEGIN COMMENT 
"Red Near Right Bottom Hatch and Cargo"
#END

STR	C102
INC	V200
OUT	MC70

// Rung Red_Ref_Panels#14
// Offset 37
STR	C103
INC	V201
OUT	MC71

// Rung Red_Ref_Panels#15
// Offset 40
STR	ST6
MWX	@FMS_Computer	2130706433	502	255	6	MHR31	1	V200	0x0	0	0x0	C200	C200	DST511
MWX	@FMS_Computer	2130706433	502	255	6	MHR30	1	V201	0x0	0	0x0	C200	C200	DST511
MWX	@FMS_Computer	2130706433	502	255	6	MHR32	1	V1	0x0	0	0x0	C200	C200	DST511
MWX	@FMS_Computer	2130706433	502	255	6	MHR33	1	V2	0x0	0	0x0	C200	C200	DST511

// End of Code Block Red_Ref_Panels
$PGMEND	Red_Ref_Panels

// Beginning of Code Block Blue_Ref_Panels
$PRGRM	Blue_Ref_Panels

// Rung Blue_Ref_Panels#1
// Offset 0
NOP

// End of Code Block Blue_Ref_Panels
$PGMEND	Blue_Ref_Panels

// Beginning of Code Block VM_Red_Time
$PRGRM	VM_Red_Time

// Rung VM_Red_Time#1
// Offset 0
#BEGIN COMMENT 
""
"********************************************************************************"
"                                  VM_TimeRed"
""
"                     Send Time to Viewmarq"
"               Check to see if display needs to be formatted"
""
"********************************************************************************"
"2014-09-30  Rev-   Initial Release   RVF"
""
"********************************************************************************"
"Key variables to monitor during debug:"
""
"VM_RedTimeStr   - Team Number string to send to the Viewmarq"
"VM_RedFormatStr  - String that formats the display for Teams"
"VM_RedFmtWords - Number of word for MRX command"
"Err_TimeRed - Error counter for Blue team Viewmarq command"
"VM_Mode - Viewmarq Mode (Custom (1) or Team/Time (0))"
""
""
#END

SG	VM_Red_Time.S0

// Rung VM_Red_Time#2
// Offset 2
#BEGIN COMMENT 
"See if Display is already formatted, if not, format it for team/time display"
#END

STRE	MHR72	0
JMP	VM_Red_Time.S20

// Rung VM_Red_Time#3
// Offset 7
STR	ST1
STRPRINT	ViewmarqString12	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 1 4><T>  </T><STR 2 4><T>   </T><AMB><STR 3 4><GRN><T>   </T><STR 4 4>"" ""$0D"""
STRPRINT	ViewmarqString15	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 1 4><T>  </T><STR 2 4><T>   </T><AMB><STR 3 4><GRN><T>   </T><STR 4 4>"" ""$0D"""
RUN	VM_SenderRed
JMP	VM_Red_Time.S2

// Rung VM_Red_Time#4
// Offset 91
SG	VM_Red_Time.S2

// Rung VM_Red_Time#5
// Offset 93
STR	VM_SenderRed.Done
JMP	VM_Red_Time.S20

// Rung VM_Red_Time#6
// Offset 95
#BEGIN COMMENT 
"Have new Time, so Create BLUE Time String, "
#END

SG	VM_Red_Time.S20

// Rung VM_Red_Time#7
// Offset 97
#BEGIN COMMENT 
"Send  Team numbers to Viewmarq"
#END

STRPRINT	ViewmarqString13	0x4	"""<ID 0><SETS 3>"" V0 ""</SETS>"" ""$0D"""
STRPRINT	ViewmarqString15	0x0	"""<ID 0><SETS 3>"" V0 ""</SETS>"" ""$0D"""
RUN	VM_SenderRed
JMP	VM_Red_Time.S22

// Rung VM_Red_Time#8
// Offset 132
SG	VM_Red_Time.S22

// Rung VM_Red_Time#9
// Offset 134
STR	VM_SenderBlue.Done
EXIT

// Rung VM_Red_Time#10
// Offset 136
NOP

// Rung VM_Red_Time#11
// Offset 137
NOP

// Rung VM_Red_Time#12
// Offset 138
NOP

// Rung VM_Red_Time#13
// Offset 139
NOP

// End of Code Block VM_Red_Time
$PGMEND	VM_Red_Time

// Beginning of Code Block VM_Blue_Time
$PRGRM	VM_Blue_Time

// Rung VM_Blue_Time#1
// Offset 0
#BEGIN COMMENT 
""
"********************************************************************************"
"                                  VM_TimeBlue"
""
"                     Send Time to Viewmarq"
"               Check to see if display needs to be formatted"
""
"********************************************************************************"
"2014-09-30  Rev-   Initial Release   RVF"
""
"********************************************************************************"
"Key variables to monitor during debug:"
""
"VM_BlueTimeStr   - Team Number string to send to the Viewmarq"
"VM_BlueFormatStr  - String that formats the display for Teams"
"VM_BlueFmtWords - Number of word for MRX command"
"Err_TimeBlue - Error counter for Blue team Viewmarq command"
"VM_Mode - Viewmarq Mode (Custom (1) or Team/Time (0))"
""
""
#END

SG	VM_Blue_Time.S0

// Rung VM_Blue_Time#2
// Offset 2
#BEGIN COMMENT 
"See if Display is already formatted, if not, format it for team/time display"
#END

STRE	MHR72	0
JMP	VM_Blue_Time.S20

// Rung VM_Blue_Time#3
// Offset 7
STR	ST1
STRPRINT	ViewmarqString11	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 4 4><T>  </T><AMB><STR 3 4><T>   </T><GRN><STR 2 4><T>   </T><STR 1 4>"" ""$0D"""
STRPRINT	ViewmarqString15	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 4 4><T>  </T><AMB><STR 3 4><T>   </T><GRN><STR 2 4><T>   </T><STR 1 4>"" ""$0D"""
RUN	VM_SenderBlue
JMP	VM_Blue_Time.S2

// Rung VM_Blue_Time#4
// Offset 91
SG	VM_Blue_Time.S2

// Rung VM_Blue_Time#5
// Offset 93
STR	VM_SenderBlue.Done
JMP	VM_Blue_Time.S20

// Rung VM_Blue_Time#6
// Offset 95
#BEGIN COMMENT 
"Have new Time, so Create BLUE Time String, "
#END

SG	VM_Blue_Time.S20

// Rung VM_Blue_Time#7
// Offset 97
#BEGIN COMMENT 
"Send time to Viewmarq"
#END

STRPRINT	ViewmarqString14	0x4	"""<ID 0><SETS 3>"" V0 ""</SETS>"" ""$0D"""
STRPRINT	ViewmarqString15	0x4	"""<ID 0><SETS 3>"" V0 ""</SETS>"" ""$0D"""
RUN	VM_SenderBlue
JMP	VM_Blue_Time.S22

// Rung VM_Blue_Time#8
// Offset 132
SG	VM_Blue_Time.S22

// Rung VM_Blue_Time#9
// Offset 134
STR	VM_SenderBlue.Done
EXIT

// Rung VM_Blue_Time#10
// Offset 136
NOP

// End of Code Block VM_Blue_Time
$PGMEND	VM_Blue_Time

// Beginning of Code Block VM_Sender_Blue
$PRGRM	VM_Sender_Blue

// Rung VM_Sender_Blue#1
// Offset 0
#BEGIN COMMENT 
""
"********************************************************************************"
"                                  VM_SenderBlue"
""
"                     Send modbus data to Blue viewmarq"
""
"********************************************************************************"
"2014-10-01  Rev-   Initial Release   RVF"
""
"********************************************************************************"
"Assumes String will be provided in ""VM_SenderStr"""
""
"Key variables to monitor during debug:"
""
"VM_SenderStr - the string the message should be in before calling this routine"
"VM_SenderWords - word count for MWX instrcution"
"VM_MRXRetryCnt - Tells you how many times the MRX had to be re-tried"
#END

SG	VM_Sender_Blue.S0

// Rung VM_Sender_Blue#2
// Offset 2
#BEGIN COMMENT 
"Convert String to bytes for modbus write"
#END

STR	ST1
STRGETB	ViewmarqString15	0	ViewmarqString15.Length	VMByteBuff0

// Rung VM_Sender_Blue#3
// Offset 7
#BEGIN COMMENT 
"Calc number of words needed for the following MWX instruction"
#END

STR	ST1
MATH	V1011	"(ViewmarqString15.Length / 2) + 1"
MATH	D37	"0"
JMP	VM_Sender_Blue.S10

// Rung VM_Sender_Blue#4
// Offset 25
#BEGIN COMMENT 
"Modbus Write msg to VM, wait here till done"
#END

SG	VM_Sender_Blue.S10

// Rung VM_Sender_Blue#5
// Offset 27
MWX	@VM_Blue	167797960	502	255	16	11000	V1011	VMByteBuff0	0x0	0	0x101	VM_Sender_Blue.S20	VM_Sender_Blue.S99	DST511

// Rung VM_Sender_Blue#6
// Offset 40
SG	VM_Sender_Blue.S20

// Rung VM_Sender_Blue#7
// Offset 42
MRX	@VM_Blue	167797960	502	255	3	11000	1	V406	0x0	0	0x101	VM_Sender_Blue.S30	VM_Sender_Blue.S99	DST511

// Rung VM_Sender_Blue#8
// Offset 55
SG	VM_Sender_Blue.S30

// Rung VM_Sender_Blue#9
// Offset 57
#BEGIN COMMENT 
"We want to see a 0 in the status.  Anything else says viewmarq is not done yet (It clears it's buffer when it is done. Until then you will see the first two characters of what you sent)"
#END

STRE	V406	0
JMP	VM_Sender_Blue.S40

// Rung VM_Sender_Blue#10
// Offset 62
#BEGIN COMMENT 
"If we don't see a 0, then inc retry count and try again in a little while ..."
#END

STRNE	V406	0
INC	D37

// Rung VM_Sender_Blue#11
// Offset 67
STRGT	D37	4
JMP	VM_Sender_Blue.S99

// Rung VM_Sender_Blue#12
// Offset 72
STR	ST1
TMR	T34	50

// Rung VM_Sender_Blue#13
// Offset 75
STR	T34.Done
JMP	VM_Sender_Blue.S20

// Rung VM_Sender_Blue#14
// Offset 77
SG	VM_Sender_Blue.S40

// Rung VM_Sender_Blue#15
// Offset 79
#BEGIN COMMENT 
"Now that the Viewmarq's buffer is clear, read the status register to make sure it is happy."
#END

MRX	@VM_Blue	167797960	502	255	3	11500	1	V406	0x0	0	0x101	VM_Sender_Blue.S50	VM_Sender_Blue.S99	DST511

// Rung VM_Sender_Blue#16
// Offset 92
SG	VM_Sender_Blue.S50

// Rung VM_Sender_Blue#17
// Offset 94
#BEGIN COMMENT 
"Convert bytes into string so we can compare with ""OK"""
#END

STRPUTB	SL1	0	2	V406
STRCMP	SL1	0x2	C89	ST1023	ST1023	"""OK"""

// Rung VM_Sender_Blue#18
// Offset 106
STR	C89
EXIT

// Rung VM_Sender_Blue#19
// Offset 108
STRN	C89
JMP	VM_Sender_Blue.S99

// Rung VM_Sender_Blue#20
// Offset 110
SG	VM_Sender_Blue.S99

// Rung VM_Sender_Blue#21
// Offset 112
INC	D34
EXIT

// Rung VM_Sender_Blue#22
// Offset 114
NOP

// Rung VM_Sender_Blue#23
// Offset 115
NOP

// End of Code Block VM_Sender_Blue
$PGMEND	VM_Sender_Blue

// Beginning of Code Block VM_Sender_Red
$PRGRM	VM_Sender_Red

// Rung VM_Sender_Red#1
// Offset 0
#BEGIN COMMENT 
""
"********************************************************************************"
"                                  VM_SenderRed"
""
"                     Send modbus data to Red viewmarq"
""
"********************************************************************************"
"2014-10-01  Rev-   Initial Release   RVF"
""
"********************************************************************************"
"Assumes String will be provided in ""VM_SenderStr"""
""
"Key variables to monitor during debug:"
""
"VM_SenderStr - the string the message should be in before calling this routine"
"VM_SenderWords - word count for MWX instrcution"
"VM_MRXRetryCnt - Tells you how many times the MRX had to be re-tried"
#END

SG	VM_Sender_Red.S0

// Rung VM_Sender_Red#2
// Offset 2
#BEGIN COMMENT 
"Convert String to bytes for modbus write"
#END

STR	ST1
STRGETB	ViewmarqString15	0	ViewmarqString15.Length	VMByteBuff0

// Rung VM_Sender_Red#3
// Offset 7
#BEGIN COMMENT 
"Calc number of words needed for the following MWX instruction"
#END

STR	ST1
MATH	V1011	"(ViewmarqString15.Length / 2) + 1"
MATH	D37	"0"
JMP	VM_Sender_Red.S10

// Rung VM_Sender_Red#4
// Offset 25
#BEGIN COMMENT 
"Modbus Write msg to VM, wait here till done"
#END

SG	VM_Sender_Red.S10

// Rung VM_Sender_Red#5
// Offset 27
MWX	@VM_Red	167797961	502	255	16	11000	V1011	VMByteBuff0	0x0	0	0x101	VM_Sender_Red.S20	VM_Sender_Red.S99	DST511

// Rung VM_Sender_Red#6
// Offset 40
SG	VM_Sender_Red.S20

// Rung VM_Sender_Red#7
// Offset 42
MRX	@VM_Red	167797961	502	255	3	11000	1	V406	0x0	0	0x101	VM_Sender_Red.S30	VM_Sender_Red.S99	DST511

// Rung VM_Sender_Red#8
// Offset 55
SG	VM_Sender_Red.S30

// Rung VM_Sender_Red#9
// Offset 57
#BEGIN COMMENT 
"We want to see a 0 in the status.  Anything else says viewmarq is not done yet (It clears it's buffer when it is done. Until then you will see the first two characters of what you sent)"
#END

STRE	V406	0
JMP	VM_Sender_Red.S40

// Rung VM_Sender_Red#10
// Offset 62
#BEGIN COMMENT 
"If we don't see a 0, then inc retry count and try again in a little while ..."
#END

STRNE	V406	0
INC	D37

// Rung VM_Sender_Red#11
// Offset 67
STRGT	D37	4
JMP	VM_Sender_Red.S99

// Rung VM_Sender_Red#12
// Offset 72
STR	ST1
TMR	T34	50

// Rung VM_Sender_Red#13
// Offset 75
STR	T34.Done
JMP	VM_Sender_Red.S20

// Rung VM_Sender_Red#14
// Offset 77
SG	VM_Sender_Red.S40

// Rung VM_Sender_Red#15
// Offset 79
#BEGIN COMMENT 
"Now that the Viewmarq's buffer is clear, read the status register to make sure it is happy."
#END

MRX	@VM_Red	167797961	502	255	3	11500	1	V406	0x0	0	0x101	VM_Sender_Red.S50	VM_Sender_Red.S99	DST511

// Rung VM_Sender_Red#16
// Offset 92
SG	VM_Sender_Red.S50

// Rung VM_Sender_Red#17
// Offset 94
#BEGIN COMMENT 
"Convert bytes into string so we can compare with ""OK"""
#END

STRPUTB	SL1	0	2	V406
STRCMP	SL1	0x2	C89	ST1023	ST1023	"""OK"""

// Rung VM_Sender_Red#18
// Offset 106
STR	C89
EXIT

// Rung VM_Sender_Red#19
// Offset 108
STRN	C89
JMP	VM_Sender_Red.S99

// Rung VM_Sender_Red#20
// Offset 110
SG	VM_Sender_Red.S99

// Rung VM_Sender_Red#21
// Offset 112
INC	D33
EXIT

// Rung VM_Sender_Red#22
// Offset 114
NOP

// Rung VM_Sender_Red#23
// Offset 115
NOP

// End of Code Block VM_Sender_Red
$PGMEND	VM_Sender_Red

// Beginning of Code Block VM_Time
$PRGRM	VM_Time

// Rung VM_Time#1
// Offset 0
SG	VM_Time.S0

// Rung VM_Time#2
// Offset 2
RUN	VM_Blue_Time

// Rung VM_Time#3
// Offset 4
STR	VM_Blue_Time.Done
JMP	VM_Time.S20

// Rung VM_Time#4
// Offset 6
SG	VM_Time.S20

// Rung VM_Time#5
// Offset 8
RUN	VM_Red_Time

// Rung VM_Time#6
// Offset 10
STR	VM_Red_Time.Done
EXIT

// Rung VM_Time#7
// Offset 12
NOP

// Rung VM_Time#8
// Offset 13
NOP

// End of Code Block VM_Time
$PGMEND	VM_Time

// Beginning of Code Block VM_Teams
$PRGRM	VM_Teams

// Rung VM_Teams#1
// Offset 0
SG	VM_Teams.S22

// Rung VM_Teams#2
// Offset 2
RUN	VM_Team_Blue

// Rung VM_Teams#3
// Offset 4
STR	VM_Team_Blue.Done
JMP	VM_Teams.S24

// Rung VM_Teams#4
// Offset 6
SG	VM_Teams.S24

// Rung VM_Teams#5
// Offset 8
RUN	VM_Team_Red

// Rung VM_Teams#6
// Offset 10
STR	VM_Team_Red.Done
EXIT

// End of Code Block VM_Teams
$PGMEND	VM_Teams

// Beginning of Code Block VM_Team_Blue
$PRGRM	VM_Team_Blue

// Rung VM_Team_Blue#1
// Offset 0
#BEGIN COMMENT 
""
"********************************************************************************"
"                                  VMBlue_TeamNums"
""
"                     Send Team Numbers to Viewmarq"
"               Check to see if display needs to be formatted"
""
"********************************************************************************"
"2014-09-29  Rev-   Initial Release   RVF"
""
"********************************************************************************"
"Key variables to monitor during debug:"
""
"VM_ BlueTeamStr   - Team Number string to send to the Viewmarq"
"VM_BlueFormatStr  - String that formats the display for Teams"
"VM_BlueFmtWords - Number of word for MRX command"
"Err_TeamNumBlue - Error counter for Blue team Viewmarq command"
"VM_Mode - Viewmarq Mode (Custom (1) or Team/Time (0))"
""
""
#END

SG	VM_Team_Blue.S0

// Rung VM_Team_Blue#2
// Offset 2
#BEGIN COMMENT 
"See if Display is already formatted, if not, format it for team/time display"
#END

STRE	MHR72	0
JMP	VM_Team_Blue.S20

// Rung VM_Team_Blue#3
// Offset 7
STR	ST1
STRPRINT	ViewmarqString11	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 4 4><T>  </T><AMB><STR 3 4><T>   </T><GRN><STR 2 4><T>   </T><STR 1 4>"" ""$0D"""
STRPRINT	ViewmarqString15	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 4 4><T>  </T><AMB><STR 3 4><T>   </T><GRN><STR 2 4><T>   </T><STR 1 4>"" ""$0D"""
RUN	VM_SenderBlue
JMP	VM_Team_Blue.S2

// Rung VM_Team_Blue#4
// Offset 91
SG	VM_Team_Blue.S2

// Rung VM_Team_Blue#5
// Offset 93
STR	VM_SenderBlue.Done
JMP	VM_Team_Blue.S20

// Rung VM_Team_Blue#6
// Offset 95
SG	VM_Team_Blue.S20

// Rung VM_Team_Blue#7
// Offset 97
#BEGIN COMMENT 
"Send  Team numbers to Viewmarq"
#END

STRPRINT	ViewmarqString7	0x4	"""<ID 0><SETS 1>"" SS6 ""</SETS><SETS 2>"" SS7 ""</SETS><SETS 4>"" SS8 ""</SETS>"" ""$0D"""
STRPRINT	ViewmarqString15	0x4	"""<ID 0><SETS 1>"" SS6 ""</SETS><SETS 2>"" SS7 ""</SETS><SETS 4>"" SS8 ""</SETS>"" ""$0D"""
RUN	VM_SenderBlue
JMP	VM_Team_Blue.S22

// Rung VM_Team_Blue#8
// Offset 154
SG	VM_Team_Blue.S22

// Rung VM_Team_Blue#9
// Offset 156
#BEGIN COMMENT 
"Send BLUE Team string to Viewmarq"
#END

STR	VM_SenderBlue.Done
EXIT

// Rung VM_Team_Blue#10
// Offset 158
NOP

// Rung VM_Team_Blue#11
// Offset 159
NOP

// End of Code Block VM_Team_Blue
$PGMEND	VM_Team_Blue

// Beginning of Code Block VM_Team_Red
$PRGRM	VM_Team_Red

// Rung VM_Team_Red#1
// Offset 0
#BEGIN COMMENT 
""
"********************************************************************************"
"                                  VM_TeamNumsRed"
""
"                     Send Team Numbers to Viewmarq"
"               Check to see if display needs to be formatted"
""
"********************************************************************************"
"2014-09-30  Rev-   Initial Release   RVF"
""
"********************************************************************************"
"Key variables to monitor during debug:"
""
"VM_ RedTeamStr   - Team Number string to send to the Viewmarq"
"VM_RedFormatStr  - String that formats the display for Teams"
"VM_RedFmtWords - Number of word for MRX command"
"Err_TeamNumRed - Error counter for Blue team Viewmarq command"
"VM_Mode - Viewmarq Mode (Custom (1) or Team/Time (0))"
""
""
#END

SG	VM_Team_Red.S0

// Rung VM_Team_Red#2
// Offset 2
#BEGIN COMMENT 
"See if Display is already formatted, if not, format it for team/time display"
#END

STRE	MHR72	0
JMP	VM_Team_Red.S20

// Rung VM_Team_Red#3
// Offset 7
STR	ST1
STRPRINT	ViewmarqString12	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 1 4><T>  </T><STR 2 4><T>   </T><AMB><STR 3 4><GRN><T>   </T><STR 4 4>"" ""$0D"""
STRPRINT	ViewmarqString15	0x4	"""<ID 0><CLR><WIN 0 0 287 31><POS 0 0><LJ><BL N><CS 3><GRN><STR 1 4><T>  </T><STR 2 4><T>   </T><AMB><STR 3 4><GRN><T>   </T><STR 4 4>"" ""$0D"""
RUN	VM_SenderRed
JMP	VM_Team_Red.S2

// Rung VM_Team_Red#4
// Offset 91
SG	VM_Team_Red.S2

// Rung VM_Team_Red#5
// Offset 93
STR	VM_SenderRed.Done
JMP	VM_Team_Red.S20

// Rung VM_Team_Red#6
// Offset 95
#BEGIN COMMENT 
"Have new team #, so Create BLUE Team Number String, "
#END

SG	VM_Team_Red.S20

// Rung VM_Team_Red#7
// Offset 97
#BEGIN COMMENT 
"Send  Team numbers to Viewmarq"
#END

STRPRINT	ViewmarqString8	0x4	"""<ID 0><SETS 1>"" SS3 ""</SETS><SETS 2>"" SS4 ""</SETS><SETS 4>"" SS5 ""</SETS>"" ""$0D"""
STRPRINT	ViewmarqString15	0x4	"""<ID 0><SETS 1>"" SS3 ""</SETS><SETS 2>"" SS4 ""</SETS><SETS 4>"" SS5 ""</SETS>"" ""$0D"""
RUN	VM_SenderRed
JMP	VM_Team_Red.S22

// Rung VM_Team_Red#8
// Offset 154
#BEGIN COMMENT 
"Send BLUE Team string to Viewmarq"
#END

SG	VM_Team_Red.S22

// Rung VM_Team_Red#9
// Offset 156
#BEGIN COMMENT 
"Send BLUE Team numbers to Viewmarq"
#END

STR	VM_SenderRed.Done
EXIT

// Rung VM_Team_Red#10
// Offset 158
NOP

// Rung VM_Team_Red#11
// Offset 159
NOP

// End of Code Block VM_Team_Red
$PGMEND	VM_Team_Red

// Beginning of Code Block CaptureTime
$PRGRM	CaptureTime

// Rung CaptureTime#1
// Offset 0
STR	ST1
MRX	@FMS_Computer	-1062731511	502	255	3	1	1	V0	0x1	50	0x0	C200	C200	DST511

// Rung CaptureTime#2
// Offset 14
STR	ST1
MRX	@FMS_Computer	-1062731511	502	255	3	1	1	MHR3	0x1	500	0x0	C200	C200	DST511

// End of Code Block CaptureTime
$PGMEND	CaptureTime

#BEGIN ELEMENT_DOC
"C0","R1_Button","",""
"C1","R2_Button","",""
"C2","R3_Button","",""
"C3","B1_Button","",""
"C4","B2_Button","",""
"C5","B3_Button","",""
"C6","Field_Button","",""
"C7","R1_Amb_Bit","",""
"C8","R2_Amb_Bit","",""
"C9","R3_Amb_Bit","",""
"C10","B1_Amb_Bit","",""
"C11","B2_Amb_Bit","",""
"C12","B3_Amb_Bit","",""
"C13","Field_Amb_Bit","",""
"C14","R1_DS_Bit","",""
"C15","R2_DS_Bit","",""
"C16","R3_DS_Bit","",""
"C17","B1_DS_Bit","",""
"C18","B2_DS_Bit","",""
"C19","B3_DS_Bit","",""
"C20","Field_R_Bit","",""
"C21","Field_B_Bit","",""
"C22","Field_G_Bit","",""
"C23","Field_Estop_Bit","",""
"C89","Temp_Bit","General test bit",""
"C90","Red_Tech","",""
"C91","Red_Foul","",""
"C92","Red_NLT_Hatch","",""
"C93","Red_NLT_Cargo","",""
"C94","Red_NRT_Hatch","",""
"C95","Red_NRT_Cargo","",""
"C96","Red_NLM_Hatch","",""
"C97","Red_NLM_Cargo","",""
"C98","Red_NRM_Hatch","",""
"C99","Red_NRM_Cargo","",""
"C100","Red_NLB_Hatch","",""
"C101","Red_NLB_Cargo","",""
"C102","Red_NRB_Hatch","",""
"C103","Red_NRB_Cargo","",""
"V1","Red_Foul_Count","",""
"V2","Red_TF_Count","",""
"V3","Blue_Foul_Count","",""
"V4","Blue_TF_Count","",""
"V16","_Red_Time","","Red_Time"
"V17","_Blue_Time","","Blue_Time"
"V20","Time","",""
"V100","TempIndexRed0","",""
"V110","_VM_Mode","","VM_Mode"
"V200","Red_Hatch_Count","",""
"V201","Red_Cargo_Count","",""
"V202","Red_Near_Comp","",""
"V203","Red_Far_Comp","",""
"V406","VM_SndrMRXStatus","",""
"V1011","VM_SenderWords","",""
"D33","Err_TeamNumRed","",""
"D34","Err_TeamNumBlu","",""
"D37","VM_MRXRetryCnt","",""
"D102","Viewmarq_RED","",""
"D103","Viewmarq_BLUE","",""
"T34","VM_SenderMRX","",""
"SS0","Red_Time","",""
"SS1","Blue_Time","",""
"SS3","Red_1","",""
"SS4","Red_2","",""
"SS5","Red_3","",""
"SS6","Blue_1","",""
"SS7","Blue_2","",""
"SS8","Blue_3","",""
"SS9","RED3_Team","",""
"SS16","BLUE1_Team","",""
"SS17","BLUE2_Team","",""
"SS18","BLUE3_Team","",""
"SS23","BlueVM_Time","",""
"SS73","Match_TimePrev","",""
"SL1","MatchTime","",""
"MC1","MB_R1_Estop","",""
"MC2","MB_R2_Estop","",""
"MC3","MB_R3_Estop","",""
"MC4","MB_B1_Estop","",""
"MC5","MB_B2_Estop","",""
"MC6","MB_B3_Estop","",""
"MC7","MB_Field_Estop","",""
"MC8","R1_Estop_Status","",""
"MC9","R2_Estop_Status","",""
"MC10","R3_Estop_Status","",""
"MC11","B1_Estop_Status","",""
"MC12","B2_Estop_Status","",""
"MC13","B3_Estop_Status","",""
"MC14","Field_Estop_Stat","",""
"MC15","R1_Ready","",""
"MC16","R2_Ready","",""
"MC17","R3_Ready","",""
"MC18","B1_Ready","",""
"MC19","B2_Ready","",""
"MC20","B3_Ready","",""
"MC21","Field_Green","",""
"MC22","Field_Red","",""
"MC23","Field_Blue","",""
"MC30","Start_Match","",""
"MC31","Stop_Match","",""
"MC32","Pre_Start_Match","",""
"MC60","R_NLT_Hatch","",""
"MC61","R_NLT_Cargo","",""
"MC62","R_NRT_Cargo","",""
"MC63","R_NRT_Hatch","",""
"MC64","R_NLM_Hatch","",""
"MC65","R_NLM_Cargo","",""
"MC66","R_NRM_Cargo","",""
"MC67","R_NRM_Hatch","",""
"MC68","R_NLB_Hatch","",""
"MC69","R_NLB_Cargo","",""
"MC70","R_NRB_Hatch","",""
"MC71","R_NRB_Cargo","",""
"MHR1","Field_Timer","",""
"MHR2","Custom_MSG","",""
"MHR3","Red1","",""
"MHR4","Red2","",""
"MHR5","Red3","",""
"MHR6","Blue1","",""
"MHR7","Blue2","",""
"MHR8","Blue3","",""
"MHR30","Red_Cargo","",""
"MHR31","Red_Hatch","",""
"MHR32","MB_Red_Foul","",""
"MHR33","MB_Red_Tech","",""
"MHR34","MB_Blue_Foul","",""
"MHR35","MB_Blue_Tech","",""
"MHR72","VM_Mode","",""
"MHR73","MB_Match_Time","",""
"ViewmarqString2","UDP_Viewmarq_Msg","",""
"ViewmarqString7","VM_BlueTeamStr","",""
"ViewmarqString8","VM_RedTeamStr","",""
"ViewmarqString11","VM_BlueFormatStr","",""
"ViewmarqString12","VM_RedFormatStr","",""
"ViewmarqString13","VM_RedTimeStr","",""
"ViewmarqString14","VM_BlueTimeStr","",""
"ViewmarqString15","VM_SenderStr","",""
"VM_Time.S0","Capture_Time","",""
"SK1","VM_Mode_TeamTime","0",""
"US0","_Estop_Buttons","","Estop_Buttons"
"US1","_View_Marq_Stuff","","View_Marq_Stuff"
"US2","_Test_UDP","","Test_UDP"
#END

